package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.requestdto.UserRegistrationDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.service.UserService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.hamcrest.Matchers.is;

@WebMvcTest(UserController.class)
public class UserControllerTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @MockBean private UserService userService;

    @Test
    void testRegisterUser() throws Exception {
        UserRegistrationDTO request = new UserRegistrationDTO();
        request.setUsername("testuser");
        request.setEmail("test@mail.com");
        request.setPassword("password");

        UserResponseDTO response = new UserResponseDTO();
        response.setId(1L);
        response.setUsername("testuser");
        response.setEmail("test@mail.com");

        Mockito.when(userService.registerUser(Mockito.any(UserRegistrationDTO.class)))
                .thenReturn(response);

        mockMvc.perform(post("/api/users/register")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username", is("testuser")));
    }
}



package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dao.UserRepository;
import com.cognizant.smarthotelbooking.dto.requestdto.UserRegistrationDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.exception.ResourceNotFoundException;
import com.cognizant.smarthotelbooking.model.User;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UserServiceImplTest {

    @InjectMocks private UserServiceImpl userService;
    @Mock private UserRepository userRepository;
    @Mock private ModelMapper modelMapper;

    @Test
    void testRegisterUser() {
        UserRegistrationDTO dto = new UserRegistrationDTO();
        dto.setUsername("testuser");
        dto.setEmail("test@mail.com");
        dto.setPassword("password");

        User user = new User();
        user.setUsername("testuser");
        user.setEmail("test@mail.com");
        user.setPassword("password");

        User savedUser = new User();
        savedUser.setId(1L);
        savedUser.setUsername("testuser");
        savedUser.setEmail("test@mail.com");

        UserResponseDTO responseDTO = new UserResponseDTO();
        responseDTO.setId(1L);
        responseDTO.setUsername("testuser");
        responseDTO.setEmail("test@mail.com");

        when(modelMapper.map(dto, User.class)).thenReturn(user);
        when(userRepository.save(user)).thenReturn(savedUser);
        when(modelMapper.map(savedUser, UserResponseDTO.class)).thenReturn(responseDTO);

        UserResponseDTO result = userService.registerUser(dto);
        assertThat(result).isNotNull();
        assertThat(result.getUsername()).isEqualTo("testuser");
    }

    @Test
    void testGetUserById_Valid() {
        User user = new User();
        user.setId(1L);
        user.setUsername("testuser");

        UserResponseDTO dto = new UserResponseDTO();
        dto.setId(1L);
        dto.setUsername("testuser");

        when(userRepository.findById(1L)).thenReturn(Optional.of(user));
        when(modelMapper.map(user, UserResponseDTO.class)).thenReturn(dto);

        UserResponseDTO result = userService.getUserById(1L);
        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo(1L);
    }

    @Test
    void testGetUserById_Invalid() {
        when(userRepository.findById(99L)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () -> userService.getUserById(99L));
    }
}





package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.requestdto.HotelRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.HotelResponseDTO;
import com.cognizant.smarthotelbooking.service.HotelService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.hamcrest.Matchers.is;

@WebMvcTest(HotelController.class)
public class HotelControllerTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @MockBean private HotelService hotelService;

    @Test
    void testCreateHotel() throws Exception {
        HotelRequestDTO request = new HotelRequestDTO();
        request.setName("Taj Hotel");
        request.setLocation("Mumbai");

        HotelResponseDTO response = new HotelResponseDTO();
        response.setId(1L);
        response.setName("Taj Hotel");
        response.setLocation("Mumbai");

        Mockito.when(hotelService.createHotel(Mockito.any(HotelRequestDTO.class)))
                .thenReturn(response);

        mockMvc.perform(post("/api/hotels")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name", is("Taj Hotel")));
    }
}




package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dao.HotelRepository;
import com.cognizant.smarthotelbooking.dto.requestdto.HotelRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.HotelResponseDTO;
import com.cognizant.smarthotelbooking.model.Hotel;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class HotelServiceImplTest {

    @InjectMocks private HotelServiceImpl hotelService;
    @Mock private HotelRepository hotelRepository;
    @Mock private ModelMapper modelMapper;

    @Test
    void testCreateHotel() {
        HotelRequestDTO dto = new HotelRequestDTO();
        dto.setName("Taj Hotel");
        dto.setLocation("Mumbai");

        Hotel hotel = new Hotel();
        hotel.setName("Taj Hotel");
        hotel.setLocation("Mumbai");

        Hotel savedHotel = new Hotel();
        savedHotel.setId(1L);
        savedHotel.setName("Taj Hotel");
        savedHotel.setLocation("Mumbai");

        HotelResponseDTO responseDTO = new HotelResponseDTO();
        responseDTO.setId(1L);
        responseDTO.setName("Taj Hotel");
        responseDTO.setLocation("Mumbai");

        when(modelMapper.map(dto, Hotel.class)).thenReturn(hotel);
        when(hotelRepository.save(hotel)).thenReturn(savedHotel);
        when(modelMapper.map(savedHotel, HotelResponseDTO.class)).thenReturn(responseDTO);

        HotelResponseDTO result = hotelService.createHotel(dto);
        assertThat(result).isNotNull();
        assertThat(result.getName()).isEqualTo("Taj Hotel");
    }
}


package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.requestdto.RoomRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.service.RoomService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.hamcrest.Matchers.is;

@WebMvcTest(RoomController.class)
public class RoomControllerTest {

    @Autowired private MockMvc mockMvc;
    @Autowired private ObjectMapper objectMapper;
    @MockBean private RoomService roomService;

    @Test
    void testAddRoom() throws Exception {
        RoomRequestDTO request = new RoomRequestDTO();
        request.setRoomNumber("101");
        request.setType("Deluxe");

        RoomResponseDTO response = new RoomResponseDTO();
        response.setId(1L);
        response.setRoomNumber("101");
        response.setType("Deluxe");

        Mockito.when(roomService.addRoom(Mockito.any(RoomRequestDTO.class)))
                .thenReturn(response);

        mockMvc.perform(post("/api/rooms")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.roomNumber", is("101")));
    }
}




package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dao.RoomRepository;
import com.cognizant.smarthotelbooking.dto.requestdto.RoomRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.model.Room;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class RoomServiceImplTest {

    @InjectMocks private RoomServiceImpl roomService;
    @Mock private RoomRepository roomRepository;
    @Mock private ModelMapper modelMapper;

    @Test
    void testAddRoom() {
        RoomRequestDTO dto = new RoomRequestDTO();
        dto.setRoomNumber("101");
        dto.setType("Deluxe");

        Room room = new Room();
        room.setRoomNumber("101");
        room.setType("Deluxe");

        Room savedRoom = new Room();
        savedRoom.setId(1L);
        savedRoom.setRoomNumber("101");
        savedRoom.setType("Deluxe");

        RoomResponseDTO responseDTO = new RoomResponseDTO();
        responseDTO.setId(1L);
        responseDTO.setRoomNumber("101");
        responseDTO.setType("Deluxe");

        when(modelMapper.map(dto, Room.class)).thenReturn(room);
        when(roomRepository.save(room)).thenReturn(savedRoom);
        when(modelMapper.map(savedRoom, RoomResponseDTO.class)).thenReturn(responseDTO);

        RoomResponseDTO result = roomService.addRoom(dto);
        assertThat(result).isNotNull();
        assertThat(result.getRoomNumber()).isEqualTo("101");
    }
}


