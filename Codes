package com.training.springrest.controller;
 
import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
import java.util.Arrays;
import java.util.List;
 
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
 
import com.fasterxml.jackson.databind.ObjectMapper;
import com.training.springrest.dto.ItemDTO;
import com.training.springrest.service.ItemService;
 
@WebMvcTest(ItemController.class)
public class ItemControllerTest {
 
    @Autowired
    private MockMvc mockMvc;
 
    @MockBean
    private ItemService itemService;
 
    @Autowired
    private ObjectMapper objectMapper;
    
    @MockBean
    private ModelMapper modelMapper;
   
    
    @Test
    public void testGetAllItems() throws Exception {
        List<ItemDTO> items = Arrays.asList(
            new ItemDTO(1L, "Item1", "Desc1"),
            new ItemDTO(2L, "Item2", "Desc2")
        );
 
        Mockito.when(itemService.getAllItems()).thenReturn(items);
 
        mockMvc.perform(get("/api/items/getAllItems"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.size()", is(2)))
            .andExpect(jsonPath("$[0].name", is("Item1")));
    }
 
    @Test
    public void testGetItemById() throws Exception {
        ItemDTO item = new ItemDTO(1L, "Item1", "Desc1");
 
        Mockito.when(itemService.getItemById(1L)).thenReturn(item);
 
        mockMvc.perform(get("/api/items/1"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.name", is("Item1")));
    }
 
    @Test
    public void testCreateItem() throws Exception {
        ItemDTO item = new ItemDTO(null, "NewItem", "NewDesc");
        ItemDTO savedItem = new ItemDTO(3L, "NewItem", "NewDesc");
 
        Mockito.when(itemService.createItem(Mockito.any(ItemDTO.class))).thenReturn(savedItem);
 
        mockMvc.perform(post("/api/items/saveItem")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(item)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.id", is(3)));
    }
 
    @Test
    public void testUpdateItem() throws Exception {
        ItemDTO existingItem = new ItemDTO(1L, "OldName", "OldDesc");
        ItemDTO updatedItem = new ItemDTO(1L, "NewName", "NewDesc");
 
        Mockito.when(itemService.getItemById(1L)).thenReturn(existingItem);
        Mockito.when(itemService.createItem(Mockito.any(ItemDTO.class))).thenReturn(updatedItem);
 
        mockMvc.perform(put("/api/items/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(updatedItem)))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.name", is("NewName")));
    }
 
    @Test
    public void testDeleteItem() throws Exception {
        Mockito.doNothing().when(itemService).deleteItem(1L);
 
        mockMvc.perform(delete("/api/items/1"))
            .andExpect(status().isNoContent());
    }
}


package com.training.springrest.service;
 
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
 
import java.util.List;
import java.util.Optional;
 
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;
 
import com.training.springrest.dao.ItemRepository;
import com.training.springrest.dto.ItemDTO;
import com.training.springrest.exception.ResourceNotFoundException;
import com.training.springrest.model.Item;
 
@ExtendWith(MockitoExtension.class)
public class ItemServiceTest {
	
	@InjectMocks
	private ItemService itemService;
 
	@Mock
	private ItemRepository itemRepository;
	@Mock
	private ModelMapper modelMapper;
 
	@Test
	void testGetAllItems() {
		// Arrange
		Item item1 = new Item(1L, "Item A", "desc1");
		Item item2 = new Item(2L, "Item B", "desc2");
		List<Item> itemList = List.of(item1, item2);
 
		ItemDTO itemDTO1 = new ItemDTO(1L, "Item A", "desc1");
		ItemDTO itemDTO2 = new ItemDTO(2L, "Item B", "desc2");
 
		when(itemRepository.findAll()).thenReturn(itemList);
		when(modelMapper.map(item1, ItemDTO.class)).thenReturn(itemDTO1);
		when(modelMapper.map(item2, ItemDTO.class)).thenReturn(itemDTO2);
 
		List<ItemDTO> result = itemService.getAllItems();
 
		assertThat(result).isNotNull();
		assertThat(result.size()).isGreaterThan(1);
	}
	@Test
    void testGetItemById_ValidId() {
        Item item = new Item(1L, "Item A", "Description A");
        ItemDTO itemDTO = new ItemDTO(1L, "Item A", "Description A");
 
        when(itemRepository.findById(1L)).thenReturn(Optional.of(item));
        when(modelMapper.map(item, ItemDTO.class)).thenReturn(itemDTO);
 
        ItemDTO result = itemService.getItemById(1L);
 
       assertThat(result).isNotNull();
       
    }
 
    @Test
    void testGetItemById_InvalidId() {
        when(itemRepository.findById(99L)).thenReturn(Optional.empty());
 
        assertThrows(ResourceNotFoundException.class, () -> itemService.getItemById(99L));
    }
 
    // Test for createItem
    @Test
    void testCreateItem() {
        ItemDTO itemDTO = new ItemDTO(null, "New Item", "New Description");
        Item item = new Item(null, "New Item", "New Description");
        Item savedItem = new Item(1L, "New Item", "New Description");
        ItemDTO savedDTO = new ItemDTO(1L, "New Item", "New Description");
 
        when(modelMapper.map(itemDTO, Item.class)).thenReturn(item);
        when(itemRepository.save(item)).thenReturn(savedItem);
        when(modelMapper.map(savedItem, ItemDTO.class)).thenReturn(savedDTO);
 
        ItemDTO result = itemService.createItem(itemDTO);
 
       assertThat(result).isNotNull();
       
    }
 
    // Test for updateItem
    @Test
    void testUpdateItem() {
        Item existingItem = new Item(1L, "Old Name", "Old Description");
        Item updatedInput = new Item(null, "Updated Name", "Updated Description");
        Item updatedItem = new Item(1L, "Updated Name", "Updated Description");
 
        when(itemRepository.findById(1L)).thenReturn(Optional.of(existingItem));
        when(itemRepository.save(existingItem)).thenReturn(updatedItem);
 
        Item result = itemService.updateItem(1L, updatedInput);
        
        assertThat(result.getName()).isEqualTo("Updated Name");
		assertThat(result.getDescription()).isEqualTo("Updated Description");
        
    }
 
    // Test for deleteItem
    @Test
    void testDeleteItem() {
        Long itemId = 1L;
 
        doNothing().when(itemRepository).deleteById(itemId);
 
        itemService.deleteItem(itemId);
 
        verify(itemRepository, times(1)).deleteById(itemId);
    }
 
}
 

package com.training.springrest.service;
 
import java.util.List;
import java.util.stream.Collectors;
 
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import com.training.springrest.dao.ItemRepository;
import com.training.springrest.dao.ItemSummary;
import com.training.springrest.dto.ItemDTO;
import com.training.springrest.exception.ResourceNotFoundException;
import com.training.springrest.model.Item;
 
@Service
public class ItemService {
 
	@Autowired ItemRepository itemRepository;
	@Autowired
	private ModelMapper modelMapper;
 
		 public List<ItemDTO> getAllItems() {
		 List<Item> items = itemRepository.findAll();
		 return items.stream()
		         .map(item -> modelMapper.map(item, ItemDTO.class))
		         .collect(Collectors.toList());
		 }
 
 
	public ItemDTO getItemById(Long id) {
		return itemRepository.findById(id).map(item->modelMapper.map(item, ItemDTO.class)).
				orElseThrow(()->new ResourceNotFoundException
						("Invalid Item id "+ id + " not found"));
	}
	
		public ItemDTO createItem(ItemDTO itemDTO) {
					
		 Item item = modelMapper.map(itemDTO, Item.class);
		 Item savedItem = itemRepository.save(item);
		 return modelMapper.map(savedItem, ItemDTO.class);
 
		}
 
	public Item updateItem(Long id, Item item) {
		Item result=itemRepository.findById(id).get();
		result.setName(item.getName());
		result.setDescription(item.getDescription());
		Item updatedItem = itemRepository.save(result);
		return updatedItem;
	}
 
	public void deleteItem(Long id) {
		itemRepository.deleteById(id);
		
	}
	
	public List<ItemSummary> findByNameAndDescription(String name,String description)
	{
		return itemRepository.findByNameAndDescription(name, description);
	}
 
}
 
 


